# Ring 
PC = [0 0 0; 0 0 1; 0 0 2; 0 0 3;0 1 0;0 1 1;0 1 2;0 2 0;0 2 1;0 3 0;1 0 0;1 0 1;1 0 2;1 1 0;1 1 1;1 2 0;2 0 0;2 0 1;2 1 0;3 0 0]
R, (x, y, z, a, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19) = QQ["x", "y", "z", "a", "c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","c10","c11","c12","c13","c14","c15","c16","c17","c18","c19"]
S33 = matrix_space(R, 3, 3)
S23 = matrix_space(R, 2, 3)

# Variables c0,...,c19
Vars = gens(R)[5:24]

# Tropical Monomials
FF = [c0; c1+z; c2+2*z; c3+3*z; c4+y; c5+y+z; c6+y+2*z; c7+2*y; c8+2*y+z; c9+3*y; c10+x; c11+x+z; c12+x+2*z; c13+x+y; c14+x+y+z; c15+x+2*y; c16+2*x; c17+2*x+z; c18+2*x+y; c19+3*x]

# Motifs
MotA = [[[18, 17, 15, 11, 2, 9],[0, 2, 3, 1]],[[18, 19, 15, 11, 2, 9],[3, 2, 0, 1]],[[18, 19, 15, 11, 2, 9],[0, 2, 3, 1]],[[18, 17, 15, 11, 1, 9],[0, 2, 3, 1]],[[18, 19, 15, 11, 1, 9],[3, 2, 0, 1]],[[18, 19, 15, 11, 1, 9],[0, 2, 3, 1]]]
MotB = [[[9, 15, 7, 1, 18, 19],[0, 1, 2, 3]],[[17, 18, 11, 1, 15, 7],[0, 2, 1, 3]],[[17, 18, 11, 1, 15, 9],[0, 2, 1, 3]],[[19, 18, 11, 1, 15, 7],[0, 2, 1, 3]],[[19, 18, 11, 1, 15, 9],[0, 2, 1, 3]]]
MotD = [[[3, 14, 2, 11, 1, 9, 15],[1, 0, 2, 3]],[[9, 15, 2, 11, 1, 9, 15],[1, 0, 2, 3]],[[14, 15, 2, 11, 1, 9, 15],[1, 0, 2, 3]],[[3, 14, 2, 11, 1, 15, 18],[1, 0, 2, 3]],[[9, 15, 2, 11, 1, 15, 18],[1, 0, 2, 3]],[[14, 15, 2, 11, 1, 15, 18],[1, 0, 2, 3]],[[3, 14, 2, 11, 1, 18, 19],[1, 0, 2, 3]],[[9, 15, 2, 11, 1, 18, 19],[1, 0, 2, 3]],[[14, 15, 2, 11, 1, 18, 19],[1, 0, 2, 3]],[[9, 15, 1, 11, 2, 3, 14],[1, 3, 2, 0]],[[15, 18, 1, 11, 2, 3, 14],[1, 3, 2, 0]],[[18, 19, 1, 11, 2, 3, 14],[1, 3, 2, 0]],[[9, 15, 1, 11, 2, 9, 15],[1, 3, 2, 0]],[[15, 18, 1, 11, 2, 9, 15],[1, 3, 2, 0]],[[18, 19, 1, 11, 2, 9, 15],[1, 3, 2, 0]],[[9, 15, 1, 11, 2, 14, 15],[1, 3, 2, 0]],[[15, 18, 1, 11, 2, 14, 15],[1, 3, 2, 0]],[[18, 19, 1, 11, 2, 14, 15],[1, 3, 2, 0]],[[2, 3, 14, 11, 17, 15, 18],[0, 1, 2, 3]],[[1, 9, 15, 11, 17, 15, 18],[0, 1, 2, 3]],[[2, 9, 15, 11, 17, 15, 18],[0, 1, 2, 3]],[[2, 3, 14, 11, 17, 18, 19],[0, 1, 2, 3]],[[1, 9, 15, 11, 17, 18, 19],[0, 1, 2, 3]],[[2, 9, 15, 11, 17, 18, 19],[0, 1, 2, 3]]]
MotH = [[[7, 15, 1, 18, 19],[0, 1, 2, 3]],[[9, 15, 2, 14, 3],[1, 3, 2, 0]],[[18, 19, 1, 13, 4],[0, 2, 1, 3]],[[11, 18, 1, 15, 9],[0, 2, 1, 3]],[[18, 19, 1, 13, 7],[0, 2, 1, 3]],[[9, 11, 1, 15, 7],[0, 2, 1, 3]],[[11, 18, 1, 15, 7],[0, 2, 1, 3]]]
MotJ = [[[11, 9, 15, 1, 2],[0, 3, 1, 2]]]

# Exits
Dir = [-1 -1 -1; 1 0 0; 0 1 0; 0 0 1]

function pts_in_motif(points)
	Mpts = PC[points[1]+1:points[1]+1, :]
	for i = 2:length(points)
		Mpts = vcat(Mpts, PC[points[i]+1:points[i]+1, :])
	end
	return Mpts
end	

function coeff_in_motif(points)
	Mcoef = Vars[points[1]+1]
	for i = 2:length(points)
		Mcoef = vcat(Mcoef, Vars[points[i]+1])
	end
	return Mcoef
end

function matrix_from_vectors(vectors)
	M = vectors[1]
	for i in 2:length(vectors)
		M = hcat(M, vectors[i])
	end
	return matrix(QQ, M)
end

# Secondary cone
Sec = [c0-2*c10 + c16; c1 + c2 - 3*c5 + c9; c4-2*c13+c18; c10-2*c16+c19; -c4 + c13+c16-c19; c5-c9-c11+c15; -c1+c7+c11-c15;  -c7 + c13 + c15 - c18; c7 - c13 - c18 + c19; c3 - 2*c6 + c8; c2-c3-c11+c12; c6-2*c8+c9; c8-c9-c14+c15; -c2 + c9 + c11 + c14 - 2*c15; c3 - 2*c12 + c17; c14 - c15 - c17 + c18]
SecEq = transpose(matrix_from_vectors(map(f -> map(v -> coeff(f, v), Vars), Sec)))
SecCone = cone_from_inequalities(SecEq)
FSecCone = facets(SecCone)

