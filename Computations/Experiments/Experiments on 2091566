Experiments on 2091566

MotC_hv = filter(Mot -> pm.polytope.dim(visibilityConeC(Mot))< 20, MotC)
MotE_hv = filter(Mot -> pm.polytope.dim(visibilityConeE(Mot))< 20, MotE)


for Mot in MotC_hv 
    visCone = visibilityConeC(Mot)
    hyp = filter(i -> pm.polytope.contains(pm.polytope.facet(SecCone,i),visCone), 0:Int(SecCone.N_FACETS)-1)
    println(hyp, ", ", pm.polytope.dim(visCone))
    if hyp != []
        V = Vector{Int}(SecCone.RAYS_IN_FACETS[hyp[1]+1, :])
        for i in 2:length(hyp) V+= Vector{Int}(SecCone.RAYS_IN_FACETS[hyp[i]+1,:]) end
        for i in 1:length(V) 
            if V[i]==length(hyp) V[i] = i else V[i] = 0 end 
        end
        V = map(i -> i-1, filter(i -> i!=0, V))
        f = pm.polytope.face(SecCone, V)
        println("The visibility cone of motif ", Mot[1], " coincides with a face of the secondary cone ", pm.polytope.equal_polyhedra(f, visCone))
    end
end

for Mot in MotE_hv 
    visCone = visibilityConeE(Mot)
    hyp = filter(i -> pm.polytope.contains(pm.polytope.facet(SecCone,i),visCone), 0:Int(SecCone.N_FACETS)-1)
    println(hyp, ", ", pm.polytope.dim(visCone))
    V = Vector{Int}(SecCone.RAYS_IN_FACETS[hyp[1]+1, :])
    for i in 2:length(hyp) V+= Vector{Int}(SecCone.RAYS_IN_FACETS[hyp[i]+1,:]) end
    for i in 1:length(V) 
        if V[i]==length(hyp) V[i] = i else V[i] = 0 end 
    end
    V = map(i -> i-1, filter(i -> i!=0, V))
    f = pm.polytope.face(SecCone, V)
    println("The visibility cone of motif ", Mot[1], " coincides with a face of the secondary cone ", pm.polytope.equal_polyhedra(f, visCone))
end